import sys
import streamlit as st
import duckdb

sys.path.insert(0, './scripts/formatted')
sys.path.insert(0, './scripts/trusted')

from profiling_formatted import desc_stats
from profiling_trusted import na_information

def profiling_exploitation(duckdb_file_path):
    """
    Function to provide descriptive statistics and missing values information
    for all the tables in the database.
    """
    # Connect to the DuckDB database
    conn = duckdb.connect(duckdb_file_path)

    tables = conn.execute("SHOW TABLES").df()['name'].tolist()

    # Iterate over each table in the database
    for table in tables:

            df = conn.execute(f"SELECT * FROM {table}").df()

            print(f"\nTable: {table}")

            # Head of table
            print('-'*40)
            print('Table head (6 first lines of the table):')
            print('-'*40)
            print(df.head(6))
            print(f"Table {table} dimensions: {df.shape}")
            print('-'*40)

            # Descriptive stats all columns
            print('-'*40)
            desc_stats(df)

            # Missing values information
            print('-'*40)
            na_information(df)

    conn.close()

### APP adjusted functions ###

# Same function as spotify_profiling but adjusted for the streamlit app
def profiling_explo_app(duckdb_file_path):
    # Connect to your DuckDB database
    conn = duckdb.connect(duckdb_file_path)

    tables = conn.execute("SHOW TABLES").df()['name'].tolist()

    for table in tables:
        df = conn.execute(f"SELECT * FROM {table}").df()
        st.subheader(f"Profiling for table: {table}")
        
        st.write("**Head table**")
        st.dataframe(df.head(6))
        st.write(f"Dimensions of the table: {df.shape}")

        # Describe() tables for numerical and non-numerical columns           
        num_summary = df.describe()  # Summary of numerical columns
        cat_summary = df.describe(include=['object', 'category'])  # Summary of categorical columns

        # Displaying numerical summary in the first column
        st.write("**Numerical columns summary**")
        st.dataframe(num_summary) 

        # Displaying categorical summary in the second column
        st.write("**Categorical columns summary**")
        st.dataframe(cat_summary)  

        # Displaying NA information in the third column
        st.write("**Missing values information**")
        st.dataframe(na_information(df))

if __name__ == "__main__":
    duckdb_file_path = input("Input DuckDB database (trusted): ")
    profiling_exploitation(duckdb_file_path)


         